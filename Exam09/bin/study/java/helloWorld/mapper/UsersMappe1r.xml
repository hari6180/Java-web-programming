

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="UsersMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="Users"
		type="study.java.helloWorld.model.Users">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id" column="id" />
		<result property="realname" column="realname" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="email" column="email" />
		<result property="gender" column="gender" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="postcode" column="postcode" />
		<result property="addr1" column="addr1" />
		<result property="addr2" column="addr2" />
		<result property="is_admin" column="is_admin" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
	</resultMap>

	<!-- 데이터 저장을 위한 기능 정의 <insert id="메서드이름에 해당하는 식별자" parameterType="파라미터의 
		데이터 타입(Beans의 클래스명)" useGeneratedKeys="자동증가 일련번호값 리턴 여부" keyProperty="자동증가 
		일련번호 컬럼명"> -->
	// 회원가입
	<insert id="join_users"
		parameterType="study.java.helloWorld.model.Users"
		useGeneratedKeys="true" keyProperty="id">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		INSERT INTO users (realname, username, password, email, gender,
		birthdate, tel, postcode, addr1, addr2, is_admin, reg_date, edit_date)
		VALUES (#{realname}, #{username}, #{password}, #{email}, #{gender},
		#{birthdate}, #{tel}, #{postcode}, #{addr1}, #{addr2}, #{is_admin},
		#{reg_date}, #{edit_date});
	</insert>



	<!-- 데이터 갱신을 위한 기능 정의 <update id="메서드이름에 해당하는 식별자" parameterType="파라미터의 
		데이터 타입(Beans의 클래스명)"> -->
	// 회원정보 수정
	<update id="editUserInfo_users"
		parameterType="study.java.helloWorld.model.Users">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		UPDATE users SET realname=#{realname}, username=#{username},
		password=#{password}, email=#{email}, gender=#{gender},
		birthdate=#{birthdate},
		tel=#{tel}, postcode=#{postcode},
		addr1=#{addr1}, addr2=#{addr2}, is_admin=#{is_admin},
		reg_date=#{reg_date}, edit_date=#{edit_date} WHERE id=#{id};
	</update>


	<!-- 데이터 삭제를 위한 기능 정의 <delete id="메서드이름에 해당하는 식별자" parameterType="파라미터의 
		데이터 타입(Beans의 클래스명)"> -->
	// 회원탈퇴
	<delete id="out_users"
		parameterType="study.java.helloWorld.model.Users">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		DELETE FROM users WHERE id=#{id};
	</delete>

	<!-- 단일행 조회를 위한 기능 정의 <select id="메서드이름에 해당하는 식별자" parameterType="파라미터의 
		데이터 타입(Beans의 클래스명)" resultMap="리턴될 Beans이름"> -->

	// 회원정보 조회
	<select id="getUserInfo"
		parameterType="study.java.helloWorld.model.Users" resultMap="users">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		SELECT id, realname, username, password, email, gender, birthdate,
		tel, postcode, addr1, addr2, is_admin, reg_date, edit_date FROM users
		WHERE id=#{id};
	</select>
	
	// 로그인
	<select id="login"
		parameterType="study.java.helloWorld.model.Users" resultMap="users">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		SELECT id, realname, username, password, email, gender, birthdate,
		tel, postcode, addr1, addr2, is_admin, reg_date, edit_date FROM users
		WHERE id=#{id} AND password=#{password};
	</select>

	<!-- 다중행 조회를 위한 기능 정의 <select id="메서드이름에 해당하는 식별자" resultMap="리턴될 Beans이름"> -->

	// 회원목록 조회
	<select id="getUserList" resultMap="users">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT id, realname, username, password, email, gender, birthdate,
		tel, postcode, addr1, addr2, is_admin, reg_date, edit_date FROM users;
	</select>

</mapper>