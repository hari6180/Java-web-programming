<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="MovieMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="Movie" type="study.java.mvmanangement.model.Movie">
		<!-- Beans의 멤버변수(property)이름과 
			대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="mcode" column="mcode" />
		<result property="title" column="title" />
		<result property="made_year" column="made_year" />
		<result property="country" column="country" />
		<result property="running_time" column="running_time" />
		<result property="opendate" column="opendate" />
		<result property="producer" column="producer" />
		<result property="distributor" column="distributor" />
		<result property="dcode" column="dcode" />
		<result property="acode" column="acode" />
	</resultMap>
	
	<!--
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름에 해당하는 식별자" 
				parameterType="파라미터의 데이터 타입(Beans의 클래스명)" 
				useGeneratedKeys="자동증가 일련번호값 리턴 여부" 
				keyProperty="자동증가 일련번호 컬럼명">
	-->
	<insert id="add_Movie" 
	    	parameterType="study.java.mvmanangement.model.Movie" 
	    	useGeneratedKeys="true"
	    	keyProperty="mcode">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		INSERT INTO Movie (title, made_year, country, running_time, opendate, producer, distributor, dcode, acode) 
		VALUES (#{title},#{made_year},#{country},#{running_time},#{opendate},#{producer},#{distributor},#{dcode},#{acode});
	</insert>

	<!--
		데이터 삭제를 위한 기능 정의
		<delete id="메서드이름에 해당하는 식별자" 
				parameterType="파라미터의 데이터 타입(Beans의 클래스명)">
	-->
	<delete id="remove_movie" 
	    	parameterType="study.java.mvmanangement.model.Movie">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		DELETE FROM Movie WHERE mcode=#{mcode};
	</delete>
	
		<!-- 특정 감독이 맡은 모든 영화를 삭제한다. -->
	<delete id="remove_movie_by_dcode" 
			parameterType="study.java.mvmanangement.model.Movie">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터가 치환된다. -->
		DELETE FROM Movie WHERE dcode=#{dcode};
	</delete>

	<!--
		데이터 갱신을 위한 기능 정의
		<update id="메서드이름에 해당하는 식별자" 
				parameterType="파라미터의 데이터 타입(Beans의 클래스명)">
	-->
	<update id="edit_movie" 
	    	parameterType="study.java.myschool.model.Movie">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		UPDATE Movie SET title=#{title}, made_year = #{made_year},
		country=#{country}, running_time=#{running_time}, opendate=#{opendate},
		producer=#{producer},dcode=#{dcode} WHERE mcode=#{mcode};

	</update>

	<!--
		단일행 조회를 위한 기능 정의
		<select id="메서드이름에 해당하는 식별자"
				parameterType="파라미터의 데이터 타입(Beans의 클래스명)" 
				resultMap="리턴될 Beans이름">
	-->
	<select id="get_movie_item" 
	    	parameterType="study.java.myschool.model.Movie" 
	    	resultMap="movie">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		SELECT mcode, title, made_year, country, running_time, opendate,
		producer, dcode FROM movie WHERE mcode=#{mcode};
		
	</select>

	<!--
		다중행 조회를 위한 기능 정의
		<select id="메서드이름에 해당하는 식별자" 
				resultMap="리턴될 Beans이름">
	-->
	<select id="get_movie_list" resultMap="movie">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT mcode, title, made_year, country, running_time, opendate,
		producer, dcode FROM movie;
	</select>

</mapper>